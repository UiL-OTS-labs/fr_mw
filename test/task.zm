/******************************************************************************\
FILE:           task.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Implementation of task: Self-Paced Reading with Moving Window
See readme.txt for more information.


Global structure of this experiment phase:

  - instructions

  - practice part
      trial
        stimulus presentation
        question (conditional)

  - pause

  - test part
      trial
        stimulus presentation
        question (conditional)


HISTORY:
2012-03-19 TV   Created.
2019-02-10 IM Adapted to record 15 segments rather than 10.

\******************************************************************************/

//requires 1.12;

import std_choose_1of2_page;

import defs;
import stimuli;
import shuffle;
import output;
import test_page;


Block task
{
    on_event:entry()
    {
        // Possibly some task initialization here.
    }

    Part instructions
    {
        on_event:entry()
        {
//            pause_page.set_text_size(1000, 600);
            pause_page.set_text(
                "<b>Beste,</b>\n"
                "\n"
                "Dank je wel voor je deelname aan experiment.\n"
                "\n"
                "Je gaat nu zinnen op het scherm zien, de ene na de andere. "
                "Elke zin is opgebroken in losse woorden. Je kunt de woorden "
                "zichtbaar maken door steeds op de spatiebalk te drukken."

//                "the button in front of you. "
                "Op deze manier loop je door de zinnen heen. Jouw taak is om "
                "elke zin zo snel mogelijk <i>stil</i> te lezen.\n"
                "\n"
                "Soms wordt een tekst gevolgd door een bewering. Je moet dan "
                "aangeven of de bewering correct is of niet. "
                "Daarom is het wel belangrijk dat je de zinnen echt <i>leest</i>.\n "
                "\n"
                "Eerst doen we een paar voorbeeld-teksten.\n"
                "\n"
                "<i>Druk op ENTER om aan het voorbeeld te beginnen</i>", 
//                "<i>Hit any button on the button-box when ready to start.</i>", 
                true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }


    Block practice
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            num_cycles = prac_items.size;

            // Prepare test page: progress bar and prompt enabled.
            test_page.setup(num_cycles, true);
        }


        on_event:exit()
        {
            test_page.cleanup();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = prac_items[practice.cycle];
                control.target = test_page;
            }


            SubTrial presentation
            {
                on_event:entry()
                {
                    test_page.action(this, item, reference_time, practice.cycle);
                }
            }


            TransientPart
            {
                on_event:entry()
                {
                    // Check if we need to ask a comprehension question.
                    if (length(item.question) == 0)
                        trial.leave();  // No question. Trial done.
                }
            }


            SubTrial question
            {
                on_event:entry()
                {
                    control.target = choose_1of2_page;
                    choose_1of2_page.set_text(item.question);
                    choose_1of2_page.set_label_texts(" Ja ", " Nee ");
                    choose_1of2_page.set_answer_values(1, 0);
                    // Or choose the other way around with false and true
//                    choose_1of2_page.set_label_texts("False", "True");
//                    choose_1of2_page.set_answer_values(0, 1);
                    choose_1of2_page.set_keys(KEY_Shift_L, KEY_Shift_R);
                    choose_1of2_page.action(this, item.qanswer);
                    // inform the control that choose_1of2_page must
                    // get an event.
                }
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }


    Part pause
    {
        on_event:entry()
        {
            pause_page.set_text(
                "Einde van het oefenvoorbeeld.\n"
                "\n"
                "Als je op dit moment nog vragen hebt, stel ze dan "
                "nu aan de proefleider.\n"
                "\n"
                "<i>Druk op ENTER om door te gaan.</i>", 
//                "<i>Hit any button on the button-box when ready to "
//                "proceed.</i>", 
                true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }


    Block test
    {
        TestItem        item;   // current item
        TestOutput      output; // current output table row


        on_event:entry()
        {
            // Randomize test items table.
            if (shuffle_test_items(selected_group) != OK) terminate;

            num_cycles = test_items[selected_group].size;
//            num_cycles = 3;

            // Prepare test page: progress bar enabled, prompt disabled.
            test_page.setup(num_cycles, false);
        }


        on_event:exit()
        {
            test_page.cleanup();

            // Save test output table as CSV file.
            test_output_save();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = test_items[selected_group][test.cycle];

                output.trialnum = test.cycle + 1;
                output.id = item.id;
                output.type = item.type;
                output.question = substring(item.question, 0, 30);
                output.qcorrect = -1;

                // Make sure the button events are handled on the test page.
                control.target = test_page;
            }


            on_event:exit()
            {
                // Add new row to test output table.
                test_output_append(output);
            }


            SubTrial presentation
            {
                on_event:entry()
                {
                    test_page.action(this, item, reference_time, test.cycle);
                }


                on_event:exit()
                {
                    output.rt1 = test_page.response.rt[1];
                    output.rt2 = test_page.response.rt[2];
                    output.rt3 = test_page.response.rt[3];
                    output.rt4 = test_page.response.rt[4];
                    output.rt5 = test_page.response.rt[5];
                    output.rt6 = test_page.response.rt[6];
                    output.rt7 = test_page.response.rt[7];
                    output.rt8 = test_page.response.rt[8];
                    output.rt9 = test_page.response.rt[9];
                    output.rt10 = test_page.response.rt[10];
                    output.rt11 = test_page.response.rt[11];
                    output.rt12 = test_page.response.rt[12];
                    output.rt13 = test_page.response.rt[13];
                    output.rt14 = test_page.response.rt[14];
                    output.rt15 = test_page.response.rt[15];
                }
            }


            TransientPart
            {
                on_event:entry()
                {
                    // Check if we need to ask a comprehension question.
                    if (random(100) >= STATEMENT_CHANCE || 
                            length(item.question) == 0)
                        trial.leave();  // No question. Trial done.
                }
            }


            SubTrial question
            {
                on_event:entry()
                {
                    control.target = choose_1of2_page;
                    choose_1of2_page.set_text(item.question);
                    choose_1of2_page.set_label_texts(" Ja ", " Nee ");
                    choose_1of2_page.set_answer_values(1, 0);
                    // Or choose the other way around with false and true
//                    choose_1of2_page.set_label_texts("False", "True");
//                    choose_1of2_page.set_answer_values(0, 1);
                    choose_1of2_page.set_keys(KEY_Shift_L, KEY_Shift_R);
                    choose_1of2_page.action(this, item.qanswer);
                }


                on_event:exit()
                {
                    output.qcorrect = choose_1of2_page.response.correct;
                    output.answer   = choose_1of2_page.response.answer;
                }
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }
}


void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task.enter(caller);
}
